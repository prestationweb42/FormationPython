P2C1
1 Conditions avec les instructions if/else
L’un des blocs essentiels à la structure d’un déroulement conditionnel est l’instruction if.

Si la condition est vraie (True), le code sexécutera. 
 Si cette condition est fausse (False), le code ne s’exécutera pas. 

Par exemple :
ensoleille = True
if ensoleille:
    print("on va à la plage !")
else:
    print("on reste à la maison !")
La ligne if s’exécute si la condition  ensoleille  est True.
La ligne else s’exécute si la condition  ensoleille  est False.

2 Conditions alternatives en ajoutant une clause 'elif'
Les instructions if/elif/else vous permettent de définir des conditions multiples. 
Le mot-clé elif  vous permet d’ajouter autant de conditions que vous voulez. 
Vous devez ensuite terminer avec une instruction else.

Admettons que vous vouliez aller à la plage s’il fait chaud dehors, et que vous vouliez faire un bonhomme de neige s’il neige. Et sinon, vous restez à la maison. Vous pouvez coder tout ça avec la syntaxe ci-dessous :

ensoleille = False
neige = True
if ensoleille:
    print("on va à la plage !")
elif neige:
    print("on fait un bonhomme de neige")
else:
    print("on reste à la maison !")

3 Conditions multiples avec des opérateurs logiques
Si vous voulez vérifier plusieurs conditions pour un seul résultat dans la même instruction  if  , vous pouvez utiliser les opérateurs logiques :
    and  : vérifie si deux conditions sont toutes les deux vraies.
    or  : vérifie si au moins une condition est vraie.
    not  : vérifie si une condition n’est pas vraie (c’est-à-dire fausse). 

Ces opérateurs peuvent être combinés et mélangés selon vos besoins.

Admettons que vous vouliez aller à la plage seulement s’il y a du soleil ET que c’est le weekend. Mais s’il y a du soleil et que nous sommes au milieu de la semaine, vous devez être au travail.

Attention : Il est important de garder en tête l'ordre d'évaluation des conditions dans une expression conditionnelle, surtout lorsque des opérateurs "or" et "and" sont utilisés. 
L'opérateur "or" s'arrêtera dès qu'il trouvera une condition vraie, 
tandis que l'opérateur "and" s'arrêtera dès qu'il rencontrera une condition fausse. 
Il est donc conseillé de bien réfléchir à l'ordre des conditions afin d'optimiser la performance du programme, et d’éviter des évaluations inutiles.

4 Conditions complexes avec des expressions comparatives
Les expressions comparatives vous permettent de comparer différentes expressions entre elles, et d’évaluer si une expression est vraie ou fausse.

Si vous avez deux valeurs,a et b, vous pouvez utiliser les opérateurs de comparaison suivants dans Python : 
    Égal à :              a   ==  b
    Non égal à :          a   !=  b
    Moins que :           a   <  b
    Moins que ou égal à : a   <=  b
    Plus que :            a   >  b
    Plus que ou égal à :  a   >=  b 

Par exemple :
nombre_de_sieges = 30
nombre_dinvites = 25
if nombre_dinvites < nombre_de_sieges:
    # autoriser plus d’invités
else:
    # ne pas autoriser plus d’invités

5 Simplifiez votre code avec les match cases
Le match est une fonctionnalité pour faciliter la comparaison de valeurs à l'aide de motifs. Le but est de simplifier la syntaxe de certaines structures courantes qui utilisent des blocs if, elif et else. Le match offre une alternative plus concise et plus lisible.

Les mots-clés utilisés dans cette structure conditionnelle. 
    Le mot-clé 'match'  est utilisé pour indiquer le début d'un bloc de match case, suivi de la variable à évaluer. 
    Le mot-clé 'case'  est utilisé pour vérifier si une valeur donnée correspond à une condition spécifique dans ce bloc. 
    Le symbole  _   est utilisé pour définir une action à effectuer si aucune condition ne correspond.

Exemple la variable fruit :
fruit = "pomme"
match fruit:
    case "pomme":
        print("J'aime les pommes !")
    case "banane":
        print("Je n'aime pas les bananes.")
    case "orange":
        print("Les oranges sont bonnes pour la santé.")
    case _:
        print("Je ne connais pas ce fruit.")

Dans cet exemple, on teste la valeur de la variable fruit et on exécute une action différente pour chaque cas possible. 
    Si fruit est égal à "pomme", on affiche "J'aime les pommes !". 
    Si fruit est égal à "banane", on affiche "Je n'aime pas les bananes." et ainsi de suite. 
    Si la variable fruit n'est égale à aucun des cas testés, on exécute la dernière action. 
    C’est le cas par défaut, où le  _   représente la valeur par défaut. 
    Il est utilisé lorsque toutes les autres options de cas ne correspondent pas à la valeur testée.