P1C3
Pour ajouter un commentaire en python c'est avec le symbole #

On peut lancer l'interpréteur python dans un terminal comme ceci :
sous windows :
python ou py
>>>

sous Mac :
python3
>>>

et pour quiter l'interpréteur : 
exit()

On peut exécuter les commandes d'un fichier python dans le terminal, 
comme ceci sous windows :
python nonfichier.py 

comme ceci sous Mac :
python3 nonfichier.py 

P1C4
Les variables
Une variable dans Python est constituée de trois éléments :
Son nom
Son type
Sa valeur

Déclarer une variable
Il est très facile de déclarer une variable dans Python. Le code ci-dessous permet de déclarer une variable.
livre = "Gatsby le Magnifique"
age = 25

Modifier une variable
livre = "Le nom de la rose"

Afficher les variables avec f-string
Pour afficher des variables, la f-string est souvent utilisée car elle permet d'insérer facilement les variables dans la chaîne de caractères à afficher. 
Une f-string est une chaîne de caractères précédée d'un  f   (ou  F   ), et contenant des expressions entre accolades {}  qui seront évaluées lors de l'exécution du programme, exemple :
nom = "Dupont"
prenom = "Jean"
age = 30

print(f"Bonjour, je m'appelle {prenom} {nom} et j'ai {age} ans.")

Nommez une variable de manière claire et descriptive pour rendre le code plus lisible et faciliter sa compréhension.

P1C5
Classez des données avec les types de données
- les entiers (Integers, en anglais) ;
- les virgules flottantes (Floats, en anglais) ;
- les chaînes de caractères (Strings, en anglais) ;
- les booléens.

La fonction "type()" 
En Python, cette fonction est utilisée pour déterminer le type de données d'une variable. Elle renvoie le type de l'objet en tant que sortie, tel que 'int', 'str', 'bool', etc. Cela permet aux développeurs de vérifier rapidement et facilement le type de données avec lesquelles ils travaillent.
Exemple :
Votre nom est Dan et de type : <class 'str'>
Vous avez 35 ans et de type : <class 'int'>

P1C6
1 Enregistrez des groupes de données avec les listes

Dans Python, on utilise des crochets  [ ]  pour indiquer une liste. 
Le code suivant crée une liste de différentes plateformes de réseaux sociaux, et la sauvegarde dans une variable appelée  'plateformes_sociales'  .

plateformes_sociales = ["Facebook", "Instagram", "Snapchat", "Twitter"]

Les listes acceptent n’importe quel type de données aussi, et même des combinaisons de types de données.

Pour accéder aux éléments d’une liste, on utilise un indice. 
Une liste commence à indice 0
Chaque élément a un indice qui lui correspond, selon sa position dans la liste. Vous obtenez la valeur de cet indice avec la syntaxe suivante :  
liste[indice]

Dans Python, vous pouvez aussi accéder aux éléments en sens inverse, en utilisant des nombres négatifs. 
Pour accéder au dernier élément de la liste, utilisez l’indice -1.

2 Accédez aux caractères d’une chaîne comme un élément d’une liste
Les indices fonctionnent aussi avec les chaînes de caractères ! 
En fait, les chaînes de caractères sont juste des listes de caractères. 
Chaque caractère correspond à un indice qui va de zéro à la longueur de la chaîne.

3 Modifiez les éléments d’une liste
Pour modifier une case d'une liste, il suffit d'utiliser l'indice de la case que l'on souhaite modifier, et d'y affecter la nouvelle valeur à l'aide de l'opérateur d'affectation (=), tout comme pour une variable.
>>> plateformes_sociales[2] = "LinkedIn"
>>> print(plateformes_sociales)
["Facebook", "Instagram", "LinkedIn", "Twitter"]

4 Ajoutez, retirez, triez les listes et longueur d'une liste
Dans Python, c’est très simple de réaliser toutes sortes d’opérations avec les listes. 
Au lieu de créer une toute nouvelle liste à chaque fois que vous voulez ajouter, retirer ou trier des éléments, vous pouvez faire appel à une méthode de liste. 
Une méthode est une façon de réaliser une opération spécifique sur un élément.  
Ajouter un élément à une liste existante, on utilise la méthode : append()  :
>>> plateformes_sociales.append("TikTok")
>>> print(plateformes_sociales)
["Facebook", "Instagram", "Snapchat", "Twitter", "TikTok"]

Pour retirer un élément spécifique d’une liste, on utilise la méthode : remove(),
mais retire uniquement la première instance du terme que vous saisissez.

Pour connaître la longueur de la liste, utilisez la méthode : len()
>>> len(plateformes_sociales)
4

Pour trier une liste c'est la méthode sort() 
Elle trie les éléments de la liste. 
Le tri se fait alphabétiquement pour les listes de chaînes, et numériquement pour les listes de nombres.
Exemple :
plateformes_sociales.sort()

Autres méthodes
extend() -> Ajoute plusieurs éléments à la fin de la liste.

insert() -> Insère un élément à une position donnée dans la liste.

pop() -> Supprime et renvoie l'élément à une position donnée de la liste, ou le dernier élément si aucun indice n'est spécifié.

index()-> Renvoie la première occurrence de l'élément spécifié dans la liste.

count() -> Renvoie le nombre d'occurrences de l'élément spécifié dans la liste.

reverse() -> Inverse l'ordre des éléments de la liste.

5 Les tuples
Les tuples sont une autre structure de Python qui sert à enregistrer des données. Au lieu des crochets   [ ]  , ils se caractérisent par les parenthèses   ()
plateformes_sociales_tuple = ("Facebook", "Instagram", "TikTok", "Twitter")

Beaucoup des propriétés des tuples sont similaires à celles des listes normales. 
Par exemple, les listes et les tuples utilisent tous deux les indices. 
La principale différence est que les tuples sont immuables (Immutable en anglais), alors que les listes sont modifiables. 

6 Trouvez un élément
Pour savoir si un élément est présent dans une liste ou un tuple, on peut utiliser l'opérateur in  . 
Cet opérateur retourne True  si l'élément est présent dans la séquence, et False  sinon.
>>> nombres = [1,2,3,4,5]
>>> 5 in nombres
True
>>> 8 in nombres
False

En résumé
Une liste est un moyen d’enregistrer plusieurs données ensemble.
Accédez aux éléments de la liste via l’indice, qui commence à 0.
Modifiez une liste en utilisant les indices et l’opérateur d’affectation =  .
Vous pouvez ajouter, retirer, trier les listes et bien plus, en utilisant les méthodes de listes.
Les tuples sont comme des listes, mais sont définis par des parenthèses   ()  à la place de crochets   []  , et ils sont immuables.

P1C7
Enregistrez des données complexes avec des dictionnaires
1 Parfois vous avez besoin de représenter des données plus complexes que des nombres, des chaînes ou des listes.

Un dictionnaire est une structure de données qui enregistre des données dans des paires clés-valeurs. Voici un exemple d’une clé et d’une valeur :  

"responsable_de_campagne": "Jeanne d'Arc"

La clé est   "responsable_de_campagne"  et la valeur est   "Jeanne d'Arc"  . 

Les dictionnaires sont indiqués par des accolades {}  au début et à la fin. Chaque paire clé-valeur comprend un deux-points  :  placé entre la clé et la valeur, et une virgule  ,   à la fin. 

Chaque dictionnaire doit être composé de clés uniques.

Dans le diagramme ci-dessous, le dictionnaire défini a trois éléments, et chaque élément est une paire clé-valeur.

2 Créez un dictionnaire , exemple :
nouvelle_campagne = {
"responsable_de_campagne": "Jeanne d'Arc",
"nom_de_campagne": "Campagne nous aimons les chiens",
"date_de_début": "01/01/2020",
"influenceurs_importants": ["@MonAmourDeChien", "@MeilleuresFriandisesPourChiens"]
}

Vous pouvez aussi créer un nouveau dictionnaire avec des accolades vides  {}  ou la fonction  dict()  , et avec des paires clés-valeurs comme indiqué ci-dessous :
taux_de_conversion = {}
taux_de_conversion['facebook'] = 3.4
taux_de_conversion['instagram'] = 1.2
taux_de_conversion = dict()
taux_de_conversion['facebook'] = 3.4
taux_de_conversion['instagram'] = 1.2

3 Accédez à une valeur dans un dictionnaire avec sa clé
Pour accéder aux différentes valeurs, vous pouvez utiliser la clé pour chacune des paires clés-valeurs.

>>> nouvelle_campagne['responsable_de_campagne']
"Jeanne d'Arc"
>>> taux_de_conversion['facebook']
3.4

3 Réalisez des opérations courantes avec les dictionnaires
Comme pour les listes, plusieurs méthodes (ou opérations) intégrées à Python vous permettent de manipuler les données dans les dictionnaires.

Ajoutez une paire clé-valeur
Pour ajouter une paire clé-valeur à un dictionnaire, ajoutez juste une nouvelle clé dans le dictionnaire existant. 
Si la clé existe déjà, vous l’écraserez en définissant une nouvelle valeur. 
nouvelle_campagne["date_de_début"] = "02/02/2022"
Si la clé n'existe pas, vous la définissez avec une nouvelle paire clé / valeur. 
nouvelle_campagne["date_de_fin"] = "03/03/2023"

Supprimez une paire clé-valeur
Pour supprimer une paire clé-valeur, vous pouvez utiliser :
le mot-clé  del  et la clé que vous voulez supprimer, 
ou encore la méthode   pop  . 
Pour supprimer la paire clé-valeur  "origine"  de la paire  clé-valeur  , écrivez :

>>> del nouvelle_campagne["date_de_fin"] 
>>> print(nouvelle_campagne)

4 Vérifiez l’existence d’une clé spécifique
Vous pouvez utiliser le mot-clé in  pour vérifier si une clé spécifique existe dans un dictionnaire. 
Pour faire cela, spécifiez la clé que vous voulez rechercher, écrivez le mot-clé in  et le nom de la variable du dictionnaire que vous examinez. 
Le résultat renvoie un booléen qui indique si la clé est dans ce dictionnaire. 

>>> "date_de_début" in nouvelle_campagne
True

En résumé
Un dictionnaire est un moyen d’enregistrer des paires clés-valeurs qui représentent un objet plus grand.

Vous pouvez créer un dictionnaire avec des accolades {}  , et y mettre toutes les clés-valeurs dès le début, ou les ajouter au fur et à mesure.

Chaque clé dans un dictionnaire doit être unique.

Résumé de la partie 1
Félicitations ! Vous avez atteint la fin de la partie 1 du cours, et vous pouvez maintenant créer des données, les blocs de code de base du code Python. Vous avez déjà fait beaucoup !

Vous avez utilisé des variables pour enregistrer des informations comme données dans le code Python.

Vous avez utilisé des types de données pour classer différents types de données : les entiers, les virgules flottantes, les chaînes de caractères et les booléens.

Vous avez utilisé des listes et des tuples pour enregistrer des données qui sont liées.  

Vous avez utilisé des dictionnaires pour enregistrer des données complexes.

P2C1
1 Conditions avec les instructions if/else
L’un des blocs essentiels à la structure d’un déroulement conditionnel est l’instruction if.

Si la condition est vraie (True), le code sexécutera. 
 Si cette condition est fausse (False), le code ne s’exécutera pas. 

Par exemple :
ensoleille = True
if ensoleille:
    print("on va à la plage !")
else:
    print("on reste à la maison !")
La ligne if s’exécute si la condition  ensoleille  est True.
La ligne else s’exécute si la condition  ensoleille  est False.

2 Conditions alternatives en ajoutant une clause 'elif'
Les instructions if/elif/else vous permettent de définir des conditions multiples. 
Le mot-clé elif  vous permet d’ajouter autant de conditions que vous voulez. 
Vous devez ensuite terminer avec une instruction else.

Admettons que vous vouliez aller à la plage s’il fait chaud dehors, et que vous vouliez faire un bonhomme de neige s’il neige. Et sinon, vous restez à la maison. Vous pouvez coder tout ça avec la syntaxe ci-dessous :

ensoleille = False
neige = True
if ensoleille:
    print("on va à la plage !")
elif neige:
    print("on fait un bonhomme de neige")
else:
    print("on reste à la maison !")

3 Conditions multiples avec des opérateurs logiques
Si vous voulez vérifier plusieurs conditions pour un seul résultat dans la même instruction  if  , vous pouvez utiliser les opérateurs logiques :
    and  : vérifie si deux conditions sont toutes les deux vraies.
    or  : vérifie si au moins une condition est vraie.
    not  : vérifie si une condition n’est pas vraie (c’est-à-dire fausse). 

Ces opérateurs peuvent être combinés et mélangés selon vos besoins.

Admettons que vous vouliez aller à la plage seulement s’il y a du soleil ET que c’est le weekend. Mais s’il y a du soleil et que nous sommes au milieu de la semaine, vous devez être au travail.

Attention : Il est important de garder en tête l'ordre d'évaluation des conditions dans une expression conditionnelle, surtout lorsque des opérateurs "or" et "and" sont utilisés. 
L'opérateur "or" s'arrêtera dès qu'il trouvera une condition vraie, 
tandis que l'opérateur "and" s'arrêtera dès qu'il rencontrera une condition fausse. 
Il est donc conseillé de bien réfléchir à l'ordre des conditions afin d'optimiser la performance du programme, et d’éviter des évaluations inutiles.

4 Conditions complexes avec des expressions comparatives
Les expressions comparatives vous permettent de comparer différentes expressions entre elles, et d’évaluer si une expression est vraie ou fausse.

Si vous avez deux valeurs,a et b, vous pouvez utiliser les opérateurs de comparaison suivants dans Python : 
    Égal à :              a   ==  b
    Non égal à :          a   !=  b
    Moins que :           a   <  b
    Moins que ou égal à : a   <=  b
    Plus que :            a   >  b
    Plus que ou égal à :  a   >=  b 

Par exemple :
nombre_de_sieges = 30
nombre_dinvites = 25
if nombre_dinvites < nombre_de_sieges:
    # autoriser plus d’invités
else:
    # ne pas autoriser plus d’invités

5 Simplifiez votre code avec les match cases
Le match est une fonctionnalité pour faciliter la comparaison de valeurs à l'aide de motifs. Le but est de simplifier la syntaxe de certaines structures courantes qui utilisent des blocs if, elif et else. Le match offre une alternative plus concise et plus lisible.

Les mots-clés utilisés dans cette structure conditionnelle. 
    Le mot-clé 'match'  est utilisé pour indiquer le début d'un bloc de match case, suivi de la variable à évaluer. 
    Le mot-clé 'case'  est utilisé pour vérifier si une valeur donnée correspond à une condition spécifique dans ce bloc. 
    Le symbole  _   est utilisé pour définir une action à effectuer si aucune condition ne correspond.

Exemple la variable fruit :
fruit = "pomme"
match fruit:
    case "pomme":
        print("J'aime les pommes !")
    case "banane":
        print("Je n'aime pas les bananes.")
    case "orange":
        print("Les oranges sont bonnes pour la santé.")
    case _:
        print("Je ne connais pas ce fruit.")

Dans cet exemple, on teste la valeur de la variable fruit et on exécute une action différente pour chaque cas possible. 
    Si fruit est égal à "pomme", on affiche "J'aime les pommes !". 
    Si fruit est égal à "banane", on affiche "Je n'aime pas les bananes." et ainsi de suite. 
    Si la variable fruit n'est égale à aucun des cas testés, on exécute la dernière action. 
    C’est le cas par défaut, où le  _   représente la valeur par défaut. 
    Il est utilisé lorsque toutes les autres options de cas ne correspondent pas à la valeur testée.